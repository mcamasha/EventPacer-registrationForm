{"version":3,"sources":["Components/Header/HeaderButton.tsx","Utils/AuthUtils.ts","Consts/NotificationConsts.ts","Enums.ts","Actions/Actions.ts","Consts/ServicesConsts.ts","Services/Services.ts","Components/Header/Header.tsx","Components/Header/HeaderStyle.ts","Components/RegistrationForm/RegistrationFormStyle.ts","Components/RegistrationForm/Components/TabPanel.tsx","Components/RegistrationForm/Components/WelcomeSection.tsx","Components/RegistrationForm/Components/GeneralInformationSection.tsx","Components/RegistrationForm/Components/SuccessRegistrationModal.tsx","Components/RegistrationForm/Enums.ts","Components/RegistrationForm/Components/PhoneInput.tsx","Components/RegistrationForm/Utils/Utils.ts","Components/RegistrationForm/Components/ContactsSection.tsx","Components/RegistrationForm/Components/SMSModal.tsx","Consts/RegistrationFormConsts.ts","Components/RegistrationForm/Consts.ts","Components/RegistrationForm/RegistrationForm.tsx","Components/PrivateRouter/PrivateRouter.tsx","Components/Home/Enums.ts","Components/Home/Home.tsx","Components/Home/HomeStyle.ts","Components/PageContent/PageContent.tsx","Components/Menu/Consts.tsx","Components/Menu/Menu.tsx","Components/Menu/MenuStyle.ts","App.tsx","Styles/Styles.ts","Consts/Theme.ts","index.tsx"],"names":["HeaderButton","className","children","onClick","Button","color","hasUserAuth","localStorage","getItem","anchorOrigin","vertical","horizontal","ERequestToGetSMSCodeResult","ERegistrationUserResult","Actions","constructor","service","enqueueSnackbar","history","sendRequestToGetSMSCode","phone","response","data","result","OK","INVALID_PHONE_NUMBER","WAIT_BEFORE_SEND","variant","Promise","resolve","reject","remainingSeconds","smsSessionParameters","nextSendAfterSec","minutes","Math","floor","seconds","errorMessage","registrationUser","code","setItem","tokens","accessToken","refreshToken","NEW_CODE_REQUIRED","INVALID_CODE","exit","removeItem","this","push","REST_URL","Services","axios","post","Header","React","actions","noop","props","handleExitButtonClick","handleRegistrationtButtonClick","render","classes","hasAuth","AppBar","position","Toolbar","Typography","title","HeaderWithRouter","withRouter","HeaderWithStyles","withStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","linkItem","textDecoration","withTheme","TabPanel","selectedTab","index","role","hidden","Box","p","WelcomeSection","onNextButtonClick","Container","maxWidth","container","welcomeHeader","welcomeBody","welcomeText","welcomeMainText","sectionFooter","endIcon","GeneralInformationSection","getLogoAddedMessage","fileName","handleChangeFile","newLogo","onChange","logo","handleChangeName","event","name","target","value","handleChangeDescription","description","handleChangeSite","site","form","isNameErrorVisible","isErrorVisible","generalInfoFieldsContainer","formColomn","formRow","dropzoneText","filesLimit","maxFileSize","acceptedFiles","getFileAddedMessage","showPreviews","showPreviewsInDropzone","previewGridClasses","generalInfoPreviewLogoContainer","item","generalInfoPreviewItemContainer","previewText","dropzoneParagraphClass","generalInfoDropzoneText","generalInfoDropZoneLogo","icon","generalInfoDropZoneLogoIcon","TextField","label","fullWidth","error","helperText","multiline","rows","SuccessRegistrationModal","renderModalBody","onClose","successRegistrationModal","SMSModalBody","SMSModalCloseIcon","successRegistrationModalText","Grid","direction","justify","successRegistrationModalCloseButton","isOpen","Modal","open","ERegistrationFormTab","EPhonePrefix","PhoneInput","state","prefix","options","Object","keys","handleChangePrefix","setState","handleChangePhone","newPhoneValue","renderOptions","map","MenuItem","isPhoneErrorVisible","FormControl","contactsPhoneContainer","contactsPhone","InputLabel","shrink","Select","labelId","id","displayEmpty","contactsPrefixSelect","type","FormHelperText","getPhoneForServer","replace","ContactsSection","passwordConfirmation","handleChangeEmail","e","email","handleChangePassword","password","handleChangePasswordConfirmation","facebook","telegram","isActionInProgress","isEmptyEmailErrorVisible","isPasswordConfirmationErrorVisible","isPasswordErrorVisible","isEmailFormatErrorVisible","test","validateEmail","disabled","generalInfoNextButton","CircularProgress","size","SMSModal","smsCode","isLoaderSendCodeButtonVisible","smsCodeTimerId","handleRequestNewSMSCode","phoneForServer","then","clearInterval","setSendCodeInterval","handleChangeSMSCode","setInterval","handleSendSMSCode","onOpenSuccessRegistrationModal","finally","componentDidMount","remainingSecondsForSMS","componentWillUnmount","Link","href","alignItems","SMSModalSendCodeButton","disableBackdropClick","disableEscapeKeyDown","REGISTRATION_FORM_REQUIRED_FIELDS","REGISTRATION_FORM_VALIDATION_ERRORS","RegistrationForm","WELCOME","isOpenSMSModal","isOpenSuccessRegistrationModal","validationErrors","isSendSMSRequestInProgress","fieldName","includes","handleChangeSelectedTab","handleSelectTab","_event","handleChangeForm","partial","prevState","handleCloseSMSModal","handleOpenSMSModal","handleNextButtonClick","section","GENERAL_INFORMATION","validateForm","CONTACTS","handleOpenSuccessRegistrationModal","handleCloseSuccessRegistrationModal","pathname","fieldNames","callback","newValidationErrors","forEach","key","isEmpty","filter","sectionErrors","keyError","undefined","header","Paper","square","registrationForm","Tabs","indicatorColor","textColor","Tab","RegistrationFormWithRouter","RegistrationFormWithSnackbar","withSnackbar","RegistrationFormWithStyles","typography","button","fontSize","float","margin","display","flexDirection","marginBottom","textAlign","width","marginTop","justifyContent","generalInfoLogoInput","generalInfoLogoInputContainer","padding","top","left","borderWidth","borderColor","height","border","boxShadow","shadows","backgroundColor","palette","background","paper","right","cursor","PrivateRoute","enabled","rest","EHomeTab","Home","LIST","flexContainer","tabContainer","ARCHIVE","STATISTICS","HomeWithStyles","_theme","PageContent","path","exact","MENU_ITEMS_CONFIGS","Menu","renderDrawerBody","toolbar","Divider","List","ListItem","ListItemIcon","ListItemText","primary","Drawer","drawerPaper","MenuWithStyles","mixins","App","AppWithStyles","createMuiTheme","main","contrastText","secondary","rootElement","document","getElementById","CssBaseline","ThemeProvider"],"mappings":"yrBAeO,MAAMA,EAAkC,EAC7CC,YACAC,WACAC,aAGE,kBAACC,EAAA,EAAD,CAAQD,QAASA,EAASF,UAAWA,EAAWI,MAAM,WACnDH,G,YCnBA,SAASI,IACd,QAASC,aAAaC,QAAQ,e,0CCCzB,MAAMC,EAA+B,CAC1CC,SAAU,MACVC,WAAY,SCAP,IAAKC,EAYAC,G,SAZAD,K,0CAAAA,E,QAAAA,E,mCAAAA,M,cAYAC,K,oCAAAA,E,4BAAAA,M,KCiBL,MAAMC,EACXC,YACUC,EACAC,EACAC,GACP,KAHOF,UAGR,KAFQC,kBAER,KADQC,UAMJC,wBACJC,GACmD,IAAD,6JAEzB,EAAKJ,QAAQG,wBAAwBC,GAFZ,OAE1CC,EAF0C,OAG1CC,EAH0C,OAGND,QAHM,IAGNA,OAHM,EAGNA,EAAUC,KAHJ,YAKxCA,QALwC,IAKxCA,OALwC,EAKxCA,EAAMC,OALkC,cAMzCX,EAA2BY,GANc,SAczCZ,EAA2Ba,qBAdc,UAsBzCb,EAA2Bc,iBAtBc,0BAO5C,EAAKT,gBAAgB,kOAA+C,CAClER,eACAkB,QAAS,YATiC,kBAYrCC,QAAQC,QAAQP,IAZqB,eAe5C,EAAKL,gBAAgB,yKAAmC,CACtDR,eACAkB,QAAS,UAjBiC,kBAoBrCC,QAAQE,UApB6B,eAuBtCC,EACJT,EAAKU,qBAAqBC,iBAEtBC,EAAUC,KAAKC,MAAML,EAAmB,IACxCM,EAAUN,EAAmB,GAEnC,EAAKd,gBAAL,8OAEMiB,EAAF,UAAeA,EAAf,0CAAmC,GAFvC,YAGMG,EAHN,yCAIE,CACE5B,eACAkB,QAAS,YAnC+B,kBAuCrCC,QAAQE,UAvC6B,eA0C5C,EAAKb,gBAAgB,iKAAgC,CACnDR,eACAkB,QAAS,UA5CiC,kBA+CrCC,QAAQE,UA/C6B,2DAmD1CQ,EAnD0C,sCAmDnB,KAAOjB,gBAnDY,aAmDnB,EAAiBC,OAG5C,EAAKL,gBAAgBqB,EAAc,CAAE7B,eAAckB,QAAS,UAtDd,4DA8D9CY,iBACJnB,EACAoB,GACiC,IAAD,qJAEP,EAAKxB,QAAQuB,iBAAiBnB,EAAOoB,GAF9B,cAExBnB,EAFwB,OAI9Bd,aAAakC,QAAQ,cAAepB,EAASC,KAAKoB,OAAOC,aACzDpC,aAAakC,QAAQ,eAAgBpB,EAASC,KAAKoB,OAAOE,cAL5B,kBAOvBhB,QAAQC,QAAQR,EAASC,OAPF,gCASxBA,EATwB,sCASjB,KAAOD,gBATU,aASjB,EAAiBC,KATA,YAWtBA,QAXsB,IAWtBA,OAXsB,EAWtBA,EAAMC,OAXgB,cAYvBV,EAAwBgC,kBAZD,UAsBvBhC,EAAwBiC,aAtBD,2BAa1B,EAAK7B,gBACH,qTACA,CACER,eACAkB,QAAS,UAjBa,oCAuB1B,EAAKV,gBAAgB,4HAA8B,CACjDR,eACAkB,QAAS,UAzBe,6BA8B1B,EAAKV,gBAAgB,iKAAgC,CACnDR,eACAkB,QAAS,UAhCe,iCAqCvBC,QAAQE,UArCe,2DA4ClCiB,OACExC,aAAayC,WAAW,eACxBzC,aAAayC,WAAW,gBAExBC,KAAK/B,QAAQgC,KAAK,M,qBC9Jf,MAKMC,EACX,oF,cCoBK,MAAMC,EAIXjC,wBACEC,GAEA,OACIiC,IAAMC,KAAN,UAAcH,EAAd,mCAAiD/B,IAOvDmB,iBACEnB,EACAoB,GAEA,OACIa,IAAMC,KAAN,UAAcH,EAAd,6BAA2C/B,EAA3C,iBAAyDoB,K,YC5BjE,MAAMe,UAAeC,YAAyB,eAAD,oBAC3CC,QAAoB,IAAI3C,EAAQ,IAAIsC,EAAYM,OAAMT,KAAKU,MAAMzC,SADtB,KAM3C0C,sBAAwB,KACtBX,KAAKQ,QAAQV,QAP4B,KAa3Cc,+BAAiC,KAC/BZ,KAAKU,MAAMzC,QAAQgC,KAAK,kBAG1BY,SAAU,MACAC,EAAYd,KAAKU,MAAjBI,QACFC,EAAmB1D,IAEzB,OACE,gBAAC2D,EAAA,EAAD,CAAQC,SAAS,UACf,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAYzC,QAAQ,KAAK1B,UAAW8D,EAAQM,OAA5C,eAGEL,GACA,gBAAChE,EAAD,CAAcG,QAAS8C,KAAKY,gCAA5B,sEAIDG,GACC,gBAAChE,EAAD,CAAcG,QAAS8C,KAAKW,uBAA5B,qCAUZ,MAAMU,EAAmBC,YAAWhB,GAMrBiB,MAJUC,YC3DFC,GACrBC,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaL,EAAMM,QAAQ,IAE7BX,MAAO,CACLQ,SAAU,GAEZI,SAAU,CACRC,eAAgB,OAChB7E,MAAO,aD8C+B,CAC1C8E,WAAW,GADYV,CAEtBH,G,oDE7DI,MCSMc,EAA+BzB,IAAW,MAC7CzD,EAAiCyD,EAAjCzD,SAAUmF,EAAuB1B,EAAvB0B,YAAaC,EAAU3B,EAAV2B,MAE/B,OACE,uBAAKC,KAAK,WAAWC,OAAQH,IAAgBC,GAC1CD,IAAgBC,GACf,gBAACG,EAAA,EAAD,CAAKC,EAAG,GACN,gBAACtB,EAAA,EAAD,KAAalE,M,qBCAhB,MAAMyF,EAAoC,EAC/C5B,UACA6B,uBAGE,gBAACC,EAAA,EAAD,CAAWC,SAAS,KAAK7F,UAAW8D,EAAQgC,WAC1C,gBAACN,EAAA,EAAD,KACE,gBAACrB,EAAA,EAAD,CAAYnE,UAAW8D,EAAQiC,cAAerE,QAAQ,MAAtD,iGAIF,gBAAC8D,EAAA,EAAD,CAAKxF,UAAW8D,EAAQkC,aACtB,gBAACR,EAAA,EAAD,KACE,gBAACrB,EAAA,EAAD,CAAYzC,QAAQ,QAAQ1B,UAAW8D,EAAQmC,aAA/C,8IAMF,gBAACT,EAAA,EAAD,KACE,gBAACrB,EAAA,EAAD,CAAYzC,QAAQ,QAAQ1B,UAAW8D,EAAQmC,aAA/C,+IAOJ,gBAACT,EAAA,EAAD,KACE,gBAACrB,EAAA,EAAD,CAAYzC,QAAQ,QAAQ1B,UAAW8D,EAAQoC,iBAA/C,kqBAaF,gBAACV,EAAA,EAAD,CAAKxF,UAAW8D,EAAQqC,eACtB,gBAAChG,EAAA,EAAD,CACED,QAASyF,EACTjE,QAAQ,YACRtB,MAAM,YACNgG,QAAS,gBAAC,IAAD,OAJX,oC,sBC/CD,MAAMC,UAAkC9C,YAAyB,eAAD,oBAMrE+C,oBAAuBC,GACf,4BAAN,OAAeA,EAAf,oHAPmE,KAerEC,iBAAoBC,IAClBzD,KAAKU,MAAMgD,SAAS,CAAEC,KAAMF,KAhBuC,KAwBrEG,iBAAoBC,IAClB7D,KAAKU,MAAMgD,SAAS,CAAEI,KAAMD,EAAME,OAAOC,SAzB0B,KAiCrEC,wBAA2BJ,IACzB7D,KAAKU,MAAMgD,SAAS,CAAEQ,YAAaL,EAAME,OAAOC,SAlCmB,KA0CrEG,iBAAoBN,IAClB7D,KAAKU,MAAMgD,SAAS,CAAEU,KAAMP,EAAME,OAAOC,SAG3CnD,SAAU,MAAD,EAMHb,KAAKU,MAJPI,EAFK,EAELA,QACA6B,EAHK,EAGLA,kBAHK,IAIL0B,KAAQP,EAJH,EAIGA,KAAMI,EAJT,EAISA,YAAaE,EAJtB,EAIsBA,KAGvBE,GAAqBC,EAPpB,EAKLA,gBAEwC,UAAYT,EAEtD,OACE,gBAAClB,EAAA,EAAD,CAAWC,SAAS,KAAK7F,UAAW8D,EAAQgC,WAC1C,gBAACN,EAAA,EAAD,CAAKxF,UAAW8D,EAAQ0D,4BACtB,gBAAChC,EAAA,EAAD,CAAKxF,UAAW8D,EAAQ2D,YACtB,gBAACjC,EAAA,EAAD,CAAKxF,UAAW8D,EAAQ4D,SACtB,gBAAC,IAAD,CACEC,aAAa,wFACbC,WAAY,EACZC,YAAa,IACbC,cAAe,CAAC,aAAc,YAAa,aAC3CpB,SAAU1D,KAAKwD,iBACfuB,oBAAqB/E,KAAKsD,oBAC1B0B,cAAY,EACZC,wBAAwB,EACxBC,mBAAoB,CAClBpC,UAAWhC,EAAQqE,gCACnBC,KAAMtE,EAAQuE,iCAEhBC,YAAY,GACZC,uBAAwBzE,EAAQ0E,wBAChC1E,QAAS,CACPa,KAAMb,EAAQ2E,wBACdC,KAAM5E,EAAQ6E,iCAKtB,gBAACnD,EAAA,EAAD,CAAKxF,UAAW8D,EAAQ2D,YACtB,gBAACjC,EAAA,EAAD,CAAKxF,UAAW8D,EAAQ4D,SACtB,gBAACkB,EAAA,EAAD,CACEC,MAAM,2EACN7B,MAAOF,EACPgC,WAAS,EACTC,MAAOzB,EACP0B,WACE1B,GAAsB,sMAExBZ,SAAU1D,KAAK4D,oBAGnB,gBAACpB,EAAA,EAAD,CAAKxF,UAAW8D,EAAQ4D,SACtB,gBAACkB,EAAA,EAAD,CACEC,MAAM,mDACNI,WAAS,EACTC,KAAM,GACNxH,QAAQ,WACRoH,WAAS,EACT9B,MAAOE,EACPR,SAAU1D,KAAKiE,2BAGnB,gBAACzB,EAAA,EAAD,CAAKxF,UAAW8D,EAAQ4D,SACtB,gBAACkB,EAAA,EAAD,CACEC,MAAM,gFACN7B,MAAOI,EACP0B,WAAS,EACTpC,SAAU1D,KAAKmE,sBAKvB,gBAAC3B,EAAA,EAAD,CAAKxF,UAAW8D,EAAQqC,eACtB,gBAAChG,EAAA,EAAD,CACED,QAASyF,EACTjE,QAAQ,YACRtB,MAAM,YACNgG,QAAS,gBAAC,IAAD,OAJX,qC,uCCpHH,MAAM+C,UAAiC5F,YAI5C6F,kBAAmB,MAAD,EACapG,KAAKU,MAA1BI,EADQ,EACRA,QAASuF,EADD,EACCA,QAEjB,OACE,uBAAKrJ,UAAW8D,EAAQwF,0BACtB,gBAAC9D,EAAA,EAAD,CAAKxF,UAAW8D,EAAQyF,cACtB,gBAAC,IAAD,CAAWvJ,UAAW8D,EAAQ0F,kBAAmBtJ,QAASmJ,IAC1D,2JACA,qBAAGrJ,UAAW8D,EAAQ2F,8BAAtB,opBAaA,gBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,QAAQ,WACR5J,UAAW8D,EAAQ+F,qCAEnB,gBAAC1J,EAAA,EAAD,CAAQuB,QAAQ,YAAYtB,MAAM,YAAYF,QAASmJ,GAAvD,iDASVxF,SAAU,MAAD,EACqBb,KAAKU,MAAzBoG,EADD,EACCA,OAAQT,EADT,EACSA,QAEhB,OACE,gBAACU,EAAA,EAAD,CAAOC,KAAMF,EAAQT,QAASA,GAC3BrG,KAAKoG,oB,0DCxDP,IAAKa,GASAC,I,SATAD,K,kBAAAA,E,0CAAAA,E,qBAAAA,Q,cASAC,K,WAAAA,E,WAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,WAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,aAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,WAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,aAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,aAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eA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","file":"static/js/main.12388a00.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n/**\r\n * @prop {string} className Класс CSS.\r\n * @prop {Function} onClick Обработчик клика по кнопке.\r\n */\r\ninterface IProps {\r\n  className?: string;\r\n  onClick?: () => void;\r\n}\r\n\r\n/**\r\n * Кнопка в хедере.\r\n */\r\nexport const HeaderButton: React.SFC<IProps> = ({\r\n  className,\r\n  children,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <Button onClick={onClick} className={className} color=\"inherit\">\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\n","/**\r\n * Функция проверки залогинен ли юзер (через проверку наличия токена в localStorage).\r\n */\r\nexport function hasUserAuth(): boolean {\r\n  return !!localStorage.getItem(\"accessToken\");\r\n}\r\n","import { SnackbarOrigin } from \"notistack\";\r\n\r\n/**\r\n * Конфигурация для расположения нотификаций приложения.\r\n */\r\nexport const anchorOrigin: SnackbarOrigin = {\r\n  vertical: \"top\",\r\n  horizontal: \"right\",\r\n};\r\n","/**\r\n * Перечисление всех возможных статусов результата вызова сервиса запроса получения SMS-кода.\r\n *\r\n * INVALID_PHONE_NUMBER - Невалидный номер телефона.\r\n * OK - Успех.\r\n * WAIT_BEFORE_SEND - Необходимо подождать N-ое количество секунд.\r\n */\r\nexport enum ERequestToGetSMSCodeResult {\r\n  INVALID_PHONE_NUMBER = \"InvalidPhoneNumber\",\r\n  OK = \"Ok\",\r\n  WAIT_BEFORE_SEND = \"WaitBeforeSend\",\r\n}\r\n\r\n/**\r\n * Перечисление ошибок при вызове сервиса регистрации юзера.\r\n *\r\n * NEW_CODE_REQUIRED - Необходимо сгенерировать новый SMS-код.\r\n * INVALID_CODE - Не валидный SMS-код.\r\n */\r\nexport enum ERegistrationUserResult {\r\n  NEW_CODE_REQUIRED = \"NewCodeRequired\",\r\n  INVALID_CODE = \"InvalidCode\",\r\n}\r\n","import { IRequestSendSMSCodeResponse, IRegistrationResponse } from \"../Models\";\r\nimport { IServices } from \"../Services/Services\";\r\nimport { anchorOrigin } from \"../Consts/NotificationConsts\";\r\nimport { ERequestToGetSMSCodeResult, ERegistrationUserResult } from \"../Enums\";\r\nimport { BrowserHistory } from \"history\";\r\n\r\n/**\r\n * Интерфейс для экшенов.\r\n */\r\nexport interface IActions {\r\n  /**\r\n   * Отправить запрос на получение SMS-кода на мобильный телефон.\r\n   *\r\n   * @param {string} phone Телефон.\r\n   */\r\n  sendRequestToGetSMSCode: (\r\n    phone: string\r\n  ) => Promise<IRequestSendSMSCodeResponse | undefined>;\r\n\r\n  /**\r\n   * Регистрация пользователя.\r\n   *\r\n   * @param {string} phone Телефон.\r\n   * @param {string} code SMS-код введёный юзером.\r\n   */\r\n  registrationUser: (\r\n    phone: string,\r\n    code: string\r\n  ) => Promise<IRegistrationResponse>;\r\n\r\n  /**\r\n   * Выйти из приложения.\r\n   */\r\n  exit: () => void;\r\n}\r\n\r\nexport class Actions implements IActions {\r\n  constructor(\r\n    private service: IServices,\r\n    private enqueueSnackbar: Function,\r\n    private history: BrowserHistory\r\n  ) {}\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  async sendRequestToGetSMSCode(\r\n    phone: string\r\n  ): Promise<IRequestSendSMSCodeResponse | undefined> {\r\n    try {\r\n      const response = await this.service.sendRequestToGetSMSCode(phone);\r\n      const data: IRequestSendSMSCodeResponse = response?.data;\r\n\r\n      switch (data?.result) {\r\n        case ERequestToGetSMSCodeResult.OK: {\r\n          this.enqueueSnackbar(\"СМС код был отправлен на указанный телефон.\", {\r\n            anchorOrigin,\r\n            variant: \"success\",\r\n          });\r\n\r\n          return Promise.resolve(data);\r\n        }\r\n        case ERequestToGetSMSCodeResult.INVALID_PHONE_NUMBER: {\r\n          this.enqueueSnackbar(\"Указан неверный номер телефона.\", {\r\n            anchorOrigin,\r\n            variant: \"error\",\r\n          });\r\n\r\n          return Promise.reject();\r\n        }\r\n        case ERequestToGetSMSCodeResult.WAIT_BEFORE_SEND: {\r\n          const remainingSeconds: number =\r\n            data.smsSessionParameters.nextSendAfterSec;\r\n\r\n          const minutes = Math.floor(remainingSeconds / 60);\r\n          const seconds = remainingSeconds % 60;\r\n\r\n          this.enqueueSnackbar(\r\n            `Повторная отправка СМС-кода доступна через ${\r\n              !!minutes ? `${minutes} минут и` : \"\"\r\n            } ${seconds} секунд`,\r\n            {\r\n              anchorOrigin,\r\n              variant: \"warning\",\r\n            }\r\n          );\r\n\r\n          return Promise.reject();\r\n        }\r\n        default: {\r\n          this.enqueueSnackbar(\"Произошла неизвестная ошибка\", {\r\n            anchorOrigin,\r\n            variant: \"error\",\r\n          });\r\n\r\n          return Promise.reject();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      const errorMessage: string = error?.response?.data;\r\n\r\n      if (errorMessage) {\r\n        this.enqueueSnackbar(errorMessage, { anchorOrigin, variant: \"error\" });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  async registrationUser(\r\n    phone: string,\r\n    code: string\r\n  ): Promise<IRegistrationResponse> {\r\n    try {\r\n      const response = await this.service.registrationUser(phone, code);\r\n\r\n      localStorage.setItem(\"accessToken\", response.data.tokens.accessToken);\r\n      localStorage.setItem(\"refreshToken\", response.data.tokens.refreshToken);\r\n\r\n      return Promise.resolve(response.data);\r\n    } catch (error) {\r\n      const data = error?.response?.data;\r\n\r\n      switch (data?.result) {\r\n        case ERegistrationUserResult.NEW_CODE_REQUIRED: {\r\n          this.enqueueSnackbar(\r\n            \"Введёный SMS-код более неактивен. Необходимо запросить новый.\",\r\n            {\r\n              anchorOrigin,\r\n              variant: \"error\",\r\n            }\r\n          );\r\n          break;\r\n        }\r\n        case ERegistrationUserResult.INVALID_CODE: {\r\n          this.enqueueSnackbar(\"Введённый SMS-код неверен.\", {\r\n            anchorOrigin,\r\n            variant: \"error\",\r\n          });\r\n          break;\r\n        }\r\n        default: {\r\n          this.enqueueSnackbar(\"Произошла неизвестная ошибка\", {\r\n            anchorOrigin,\r\n            variant: \"error\",\r\n          });\r\n        }\r\n      }\r\n\r\n      return Promise.reject();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  exit() {\r\n    localStorage.removeItem(\"accessToken\");\r\n    localStorage.removeItem(\"refreshToken\");\r\n\r\n    this.history.push(\"/\");\r\n  }\r\n}\r\n","/**\r\n * Флаг включения рестов.\r\n */\r\nexport const IS_REST_ACTIVE: boolean = true;\r\n\r\n/**\r\n * URL рестов.\r\n */\r\nexport const REST_URL: string =\r\n  \"https://cors-anywhere.herokuapp.com/https://eventpacerstage.azurewebsites.net/api\";\r\n\r\n/**\r\n * Путь до моков.\r\n */\r\nexport const MOCK_URL = \"assets/mocks\";\r\n","import axios, { AxiosPromise } from \"axios\";\r\nimport { IRequestSendSMSCodeResponse, IRegistrationResponse } from \"../Models\";\r\nimport { IS_REST_ACTIVE, REST_URL } from \"../Consts/ServicesConsts\";\r\nimport sendRequestToGetSMSCode from \"../assets/mocks/sendRequestToGetSMSCode.json\";\r\nimport registrationSuccess from \"../assets/mocks/registration_success.json\";\r\n\r\n/**\r\n * Модель сервисов.\r\n */\r\nexport interface IServices {\r\n  /**\r\n   * Рест отправки запроса на получение SMS-кода на заданный номер телефона.\r\n   */\r\n  sendRequestToGetSMSCode: (\r\n    phone: string\r\n  ) => AxiosPromise<IRequestSendSMSCodeResponse>;\r\n\r\n  /**\r\n   * Рест для регистрации юзера.\r\n   */\r\n  registrationUser: (\r\n    phone: string,\r\n    code: string\r\n  ) => AxiosPromise<IRegistrationResponse>;\r\n}\r\n\r\n/**\r\n * Сервисы приложения.\r\n */\r\nexport class Services implements IServices {\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  sendRequestToGetSMSCode(\r\n    phone: string\r\n  ): AxiosPromise<IRequestSendSMSCodeResponse> {\r\n    return IS_REST_ACTIVE\r\n      ? axios.post(`${REST_URL}/auth/requestCode?phone=${phone}`)\r\n      : Promise.resolve(sendRequestToGetSMSCode);\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  registrationUser(\r\n    phone: string,\r\n    code?: string\r\n  ): AxiosPromise<IRegistrationResponse> {\r\n    return IS_REST_ACTIVE\r\n      ? axios.post(`${REST_URL}/auth/login?phone=${phone}&code=${code}`)\r\n      : Promise.reject(registrationSuccess);\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  WithStyles,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport { HeaderButton } from \"./HeaderButton\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport { hasUserAuth } from \"../../Utils/AuthUtils\";\r\nimport { styles } from \"./HeaderStyle\";\r\nimport { Actions, IActions } from \"../../Actions/Actions\";\r\nimport { Services } from \"../../Services/Services\";\r\nimport { noop } from \"lodash\";\r\n\r\ntype TProps = WithStyles<typeof styles> & RouteComponentProps;\r\n\r\n/**\r\n * Хедер приложения.\r\n */\r\nclass Header extends React.Component<TProps> {\r\n  actions: IActions = new Actions(new Services(), noop, this.props.history);\r\n\r\n  /**\r\n   * Обрабочик нажатия на кнопку \"Выйти\".\r\n   */\r\n  handleExitButtonClick = () => {\r\n    this.actions.exit();\r\n  };\r\n\r\n  /**\r\n   * Обрабочик нажатия на кнопку \"Регистрация\".\r\n   */\r\n  handleRegistrationtButtonClick = () => {\r\n    this.props.history.push(\"/registration\");\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const hasAuth: boolean = hasUserAuth();\r\n\r\n    return (\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Eventpacer\r\n          </Typography>\r\n          {!hasAuth && (\r\n            <HeaderButton onClick={this.handleRegistrationtButtonClick}>\r\n              Регистрация\r\n            </HeaderButton>\r\n          )}\r\n          {hasAuth && (\r\n            <HeaderButton onClick={this.handleExitButtonClick}>\r\n              Выйти\r\n            </HeaderButton>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  }\r\n}\r\n\r\nconst HeaderWithRouter = withRouter(Header);\r\n\r\nconst HeaderWithStyles = withStyles(styles, {\r\n  withTheme: true,\r\n})(HeaderWithRouter);\r\n\r\nexport default HeaderWithStyles;\r\n","import { createStyles, Theme } from \"@material-ui/core\";\r\n\r\n/**\r\n * Стили для хедера.\r\n *\r\n * @param {Theme} theme Тема приложения.\r\n */\r\nexport const styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    linkItem: {\r\n      textDecoration: \"none\",\r\n      color: \"inherit\",\r\n    },\r\n  });\r\n","import { createStyles, Theme } from \"@material-ui/core\";\r\n\r\n/**\r\n * Стили для формы регистрации.\r\n *\r\n * @param {Theme} theme Тема приложения.\r\n */\r\nexport const styles = (theme: Theme) =>\r\n  createStyles({\r\n    header: {\r\n      ...theme.typography.button,\r\n      fontSize: theme.spacing(3),\r\n      float: \"left\",\r\n      margin: theme.spacing(5, 0),\r\n    },\r\n    container: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n    },\r\n    registrationForm: {\r\n      marginBottom: theme.spacing(4),\r\n    },\r\n    welcomeHeader: {\r\n      float: \"left\",\r\n      margin: theme.spacing(4, 0),\r\n    },\r\n    welcomeText: {\r\n      textAlign: \"left\",\r\n      width: \"80%\",\r\n    },\r\n    welcomeBody: {\r\n      display: \"flex\",\r\n    },\r\n    welcomeMainText: {\r\n      textAlign: \"left\",\r\n      marginTop: theme.spacing(4),\r\n    },\r\n    sectionFooter: {\r\n      textAlign: \"right\",\r\n      marginTop: theme.spacing(4),\r\n    },\r\n    generalInfoFieldsContainer: {\r\n      display: \"flex\",\r\n      justifyContent: \"space-around\",\r\n    },\r\n    generalInfoLogoInput: {\r\n      display: \"none\",\r\n    },\r\n    generalInfoLogoInputContainer: {\r\n      float: \"right\",\r\n    },\r\n    generalInfoPreviewLogoContainer: {\r\n      margin: \"0\",\r\n      justifyContent: \"center\",\r\n      position: \"relative\",\r\n      width: \"200%\",\r\n    },\r\n    generalInfoPreviewItemContainer: {\r\n      padding: \"0!important\",\r\n      position: \"absolute\",\r\n      top: theme.spacing(-14),\r\n      left: theme.spacing(9),\r\n    },\r\n    generalInfoDropZoneLogoIcon: {\r\n      color: \"#757575\",\r\n    },\r\n    generalInfoDropzoneText: {\r\n      fontSize: \"1.2em\",\r\n      color: \"#757575\",\r\n    },\r\n    generalInfoDropZoneLogo: {\r\n      borderWidth: \"1px\",\r\n      borderColor: \"#757575\",\r\n    },\r\n    generalInfoNextButton: {\r\n      width: theme.spacing(25),\r\n      height: theme.spacing(5),\r\n    },\r\n    formRow: {\r\n      marginBottom: theme.spacing(3),\r\n      width: theme.spacing(38),\r\n    },\r\n    formColomn: {\r\n      width: theme.spacing(38),\r\n      marginRight: theme.spacing(8),\r\n      display: \"inline-block\",\r\n    },\r\n    contactsPhone: {\r\n      display: \"flex\",\r\n      flexDirection: \"row\",\r\n    },\r\n    contactsPhoneContainer: {\r\n      width: \"100%\",\r\n    },\r\n    contactsPrefixSelect: {\r\n      marginRight: theme.spacing(3),\r\n    },\r\n    SMSModal: {\r\n      position: \"absolute\",\r\n      width: theme.spacing(50),\r\n      border: \"2px solid #000\",\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n      backgroundColor: theme.palette.background.paper,\r\n      top: \"40%\",\r\n      left: \"35%\",\r\n    },\r\n    SMSModalBody: {\r\n      position: \"relative\",\r\n    },\r\n    SMSModalCloseIcon: {\r\n      position: \"absolute\",\r\n      right: \"0\",\r\n      cursor: \"pointer\",\r\n    },\r\n    SMSModalSendCodeButton: {\r\n      width: theme.spacing(15),\r\n      height: theme.spacing(5),\r\n    },\r\n    successRegistrationModal: {\r\n      position: \"absolute\",\r\n      width: theme.spacing(75),\r\n      border: \"2px solid #000\",\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n      backgroundColor: theme.palette.background.paper,\r\n      top: \"30%\",\r\n      left: \"30%\",\r\n    },\r\n    successRegistrationModalText: {\r\n      margin: theme.spacing(7, 0),\r\n    },\r\n    successRegistrationModalCloseButton: {\r\n      textAlign: \"end\",\r\n    },\r\n  });\r\n","import * as React from \"react\";\r\nimport { Box, Typography } from \"@material-ui/core\";\r\nimport { ERegistrationFormTab } from \"../Enums\";\r\n\r\n/**\r\n * @prop {ERegistrationFormTab} selectedTab Выбранный таб.\r\n * @prop {ERegistrationFormTab} index Индекс данного таба.\r\n */\r\ninterface IProps {\r\n  selectedTab: ERegistrationFormTab;\r\n  index: ERegistrationFormTab;\r\n}\r\n\r\n/**\r\n * Панель табов секций формы регистрации.\r\n */\r\nexport const TabPanel: React.SFC<IProps> = (props) => {\r\n  const { children, selectedTab, index } = props;\r\n\r\n  return (\r\n    <div role=\"tabpanel\" hidden={selectedTab !== index}>\r\n      {selectedTab === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport {\r\n  Typography,\r\n  Container,\r\n  WithStyles,\r\n  Box,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport { styles } from \"../RegistrationFormStyle\";\r\n\r\n/**\r\n * @prop {Function} onNextButtonClick Обработчик нажатия на кнопку \"Далее\".\r\n */\r\ninterface IProps {\r\n  onNextButtonClick: () => void;\r\n}\r\n\r\ntype TProps = IProps & WithStyles<typeof styles>;\r\n\r\n/**\r\n * Секция \"Приветствие\".\r\n */\r\nexport const WelcomeSection: React.SFC<TProps> = ({\r\n  classes,\r\n  onNextButtonClick,\r\n}) => {\r\n  return (\r\n    <Container maxWidth=\"md\" className={classes.container}>\r\n      <Box>\r\n        <Typography className={classes.welcomeHeader} variant=\"h5\">\r\n          Добро Пожаловать!\r\n        </Typography>\r\n      </Box>\r\n      <Box className={classes.welcomeBody}>\r\n        <Box>\r\n          <Typography variant=\"body1\" className={classes.welcomeText}>\r\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos\r\n            blanditiis tenetur unde suscipit, quam beatae rerum inventore\r\n            consectetur.\r\n          </Typography>\r\n        </Box>\r\n        <Box>\r\n          <Typography variant=\"body1\" className={classes.welcomeText}>\r\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos\r\n            blanditiis tenetur unde suscipit, quam beatae rerum inventore\r\n            consectetur.\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n      <Box>\r\n        <Typography variant=\"body1\" className={classes.welcomeMainText}>\r\n          Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti quod\r\n          sapiente quo aspernatur reprehenderit praesentium. Voluptatum\r\n          excepturi dolorum, recusandae voluptas perspiciatis tenetur aperiam\r\n          accusantium tempore, repellendus et aut expedita quaerat. Voluptatum\r\n          excepturi dolorum, recusandae voluptas perspiciatis tenetur aperiam\r\n          accusantium tempore, repellendus et aut expedita quaerat. Voluptatum\r\n          excepturi dolorum, recusandae voluptas perspiciatis tenetur aperiam\r\n          accusantium tempore, repellendus et aut expedita quaerat. Voluptatum\r\n          excepturi dolorum, recusandae voluptas perspiciatis tenetur aperiam\r\n          accusantium tempore, repellendus et aut expedita quaerat.\r\n        </Typography>\r\n      </Box>\r\n      <Box className={classes.sectionFooter}>\r\n        <Button\r\n          onClick={onNextButtonClick}\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          endIcon={<ArrowForwardIosIcon />}\r\n        >\r\n          Далее\r\n        </Button>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport {\r\n  Container,\r\n  WithStyles,\r\n  Box,\r\n  Button,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport { styles } from \"../RegistrationFormStyle\";\r\nimport { DropzoneArea } from \"material-ui-dropzone\";\r\nimport { ISectionProps } from \"../Models\";\r\n\r\ntype TProps = ISectionProps & WithStyles<typeof styles>;\r\n\r\n/**\r\n * Секция \"Общая информация\".\r\n */\r\nexport class GeneralInformationSection extends React.Component<TProps> {\r\n  /**\r\n   * Метод возвращающий кастомную текстовку нотификации успешного добавления логотипа.\r\n   *\r\n   * @param {string} fileName Наименование добавляемого поля.\r\n   */\r\n  getLogoAddedMessage = (fileName: string) => {\r\n    return `Файл ${fileName} был успешно добавлен.`;\r\n  };\r\n\r\n  /**\r\n   * Метод возвращающий кастомную текстовку нотификации успешного добавления логотипа.\r\n   *\r\n   * @param {string} fileName Наименование добавляемого поля.\r\n   */\r\n  handleChangeFile = (newLogo: any) => {\r\n    this.props.onChange({ logo: newLogo });\r\n  };\r\n\r\n  /**\r\n   * Обработчик изменения значения поля \"Наименование\".\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} event Событие изменения значения.\r\n   */\r\n  handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onChange({ name: event.target.value });\r\n  };\r\n\r\n  /**\r\n   * Обработчик изменения значения поля \"Описание\".\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} event Событие изменения значения.\r\n   */\r\n  handleChangeDescription = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onChange({ description: event.target.value });\r\n  };\r\n\r\n  /**\r\n   * Обработчик изменения значения поля \"Web-сайт\".\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} event Событие изменения значения.\r\n   */\r\n  handleChangeSite = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onChange({ site: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      onNextButtonClick,\r\n      form: { name, description, site },\r\n      isErrorVisible,\r\n    } = this.props;\r\n    const isNameErrorVisible = isErrorVisible(\"name\") && !name;\r\n\r\n    return (\r\n      <Container maxWidth=\"md\" className={classes.container}>\r\n        <Box className={classes.generalInfoFieldsContainer}>\r\n          <Box className={classes.formColomn}>\r\n            <Box className={classes.formRow}>\r\n              <DropzoneArea\r\n                dropzoneText=\"Перетащите файл\"\r\n                filesLimit={1}\r\n                maxFileSize={5000000}\r\n                acceptedFiles={[\"image/jpeg\", \"image/png\", \"image/bmp\"]}\r\n                onChange={this.handleChangeFile}\r\n                getFileAddedMessage={this.getLogoAddedMessage}\r\n                showPreviews\r\n                showPreviewsInDropzone={false}\r\n                previewGridClasses={{\r\n                  container: classes.generalInfoPreviewLogoContainer,\r\n                  item: classes.generalInfoPreviewItemContainer,\r\n                }}\r\n                previewText=\"\"\r\n                dropzoneParagraphClass={classes.generalInfoDropzoneText}\r\n                classes={{\r\n                  root: classes.generalInfoDropZoneLogo,\r\n                  icon: classes.generalInfoDropZoneLogoIcon,\r\n                }}\r\n              />\r\n            </Box>\r\n          </Box>\r\n          <Box className={classes.formColomn}>\r\n            <Box className={classes.formRow}>\r\n              <TextField\r\n                label=\"Наименование\"\r\n                value={name}\r\n                fullWidth\r\n                error={isNameErrorVisible}\r\n                helperText={\r\n                  isNameErrorVisible && \"Не указано наименование организации\"\r\n                }\r\n                onChange={this.handleChangeName}\r\n              />\r\n            </Box>\r\n            <Box className={classes.formRow}>\r\n              <TextField\r\n                label=\"Описание\"\r\n                multiline\r\n                rows={11}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={description}\r\n                onChange={this.handleChangeDescription}\r\n              />\r\n            </Box>\r\n            <Box className={classes.formRow}>\r\n              <TextField\r\n                label=\"Web-сайт компании\"\r\n                value={site}\r\n                fullWidth\r\n                onChange={this.handleChangeSite}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <Box className={classes.sectionFooter}>\r\n          <Button\r\n            onClick={onNextButtonClick}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            endIcon={<ArrowForwardIosIcon />}\r\n          >\r\n            Далее\r\n          </Button>\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Modal, WithStyles, Box, Button, Grid } from \"@material-ui/core\";\r\nimport { styles } from \"../RegistrationFormStyle\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n/**\r\n * @prop {Function} onClose Обработчик закрытия модального окна.\r\n * @prop {boolean} isOpen Флаг отображения модального окна.\r\n */\r\ninterface IProps {\r\n  onClose: () => void;\r\n  isOpen: boolean;\r\n}\r\n\r\ntype TProps = IProps & WithStyles<typeof styles>;\r\n\r\n/**\r\n * Модальное окно при успешном окончании регистрации.\r\n */\r\nexport class SuccessRegistrationModal extends React.Component<TProps> {\r\n  /**\r\n   * Рендер тела модального окна.\r\n   */\r\n  renderModalBody() {\r\n    const { classes, onClose } = this.props;\r\n\r\n    return (\r\n      <div className={classes.successRegistrationModal}>\r\n        <Box className={classes.SMSModalBody}>\r\n          <CloseIcon className={classes.SMSModalCloseIcon} onClick={onClose} />\r\n          <h2>Спасибо, что выбрали нас!</h2>\r\n          <p className={classes.successRegistrationModalText}>\r\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit.\r\n            Aspernatur, rem. Animi provident molestiae ut porro consequuntur sit\r\n            nemo ad rem pariatur quasi minus, sapiente, magni, in exercitationem\r\n            nam praesentium velit! Lorem ipsum dolor sit amet, consectetur\r\n            adipisicing elit. Aspernatur, rem. Animi provident molestiae ut\r\n            porro consequuntur sit nemo ad rem pariatur quasi minus, sapiente,\r\n            magni, in exercitationem nam praesentium velit! Lorem ipsum dolor\r\n            sit amet, consectetur adipisicing elit. Aspernatur, rem. Animi\r\n            provident molestiae ut porro consequuntur sit nemo ad rem pariatur\r\n            quasi minus, sapiente, magni, in exercitationem nam praesentium\r\n            velit!\r\n          </p>\r\n          <Grid\r\n            direction=\"row\"\r\n            justify=\"flex-end\"\r\n            className={classes.successRegistrationModalCloseButton}\r\n          >\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={onClose}>\r\n              Закрыть\r\n            </Button>\r\n          </Grid>\r\n        </Box>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isOpen, onClose } = this.props;\r\n\r\n    return (\r\n      <Modal open={isOpen} onClose={onClose}>\r\n        {this.renderModalBody()}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n","/**\r\n * Вкладки формы регистрации.\r\n *\r\n * WELCOME - Приветствие.\r\n * GENERAL_INFORMATION - Общая информация.\r\n * CONTACTS - Контакты.\r\n */\r\nexport enum ERegistrationFormTab {\r\n  WELCOME = \"WELCOME\",\r\n  GENERAL_INFORMATION = \"GENERAL_INFORMATION\",\r\n  CONTACTS = \"CONTACTS\",\r\n}\r\n\r\n/**\r\n * Префиксы номеров телефонов.\r\n */\r\nexport enum EPhonePrefix {\r\n  \"+0\" = \"+0\",\r\n  \"+7\" = \"+7\",\r\n  \"+995\" = \"+995\",\r\n  \"+93\" = \"+93\",\r\n  \"+358\" = \"+358\",\r\n  \"+355\" = \"+355\",\r\n  \"+213\" = \"+213\",\r\n  \"+1\" = \"+1\",\r\n  \"+376\" = \"+376\",\r\n  \"+244\" = \"+244\",\r\n  \"+54\" = \"+54\",\r\n  \"+374\" = \"+374\",\r\n  \"+297\" = \"+297\",\r\n  \"+247\" = \"+247\",\r\n  \"+61\" = \"+61\",\r\n  \"+672\" = \"+672\",\r\n  \"+43\" = \"+43\",\r\n  \"+994\" = \"+994\",\r\n  \"+973\" = \"+973\",\r\n  \"+880\" = \"+880\",\r\n  \"+375\" = \"+375\",\r\n  \"+32\" = \"+32\",\r\n  \"+501\" = \"+501\",\r\n  \"+229\" = \"+229\",\r\n  \"+975\" = \"+975\",\r\n  \"+591\" = \"+591\",\r\n  \"+599\" = \"+599\",\r\n  \"+387\" = \"+387\",\r\n  \"+267\" = \"+267\",\r\n  \"+55\" = \"+55\",\r\n  \"+246\" = \"+246\",\r\n  \"+673\" = \"+673\",\r\n  \"+359\" = \"+359\",\r\n  \"+226\" = \"+226\",\r\n  \"+95\" = \"+95\",\r\n  \"+257\" = \"+257\",\r\n  \"+855\" = \"+855\",\r\n  \"+237\" = \"+237\",\r\n  \"+34\" = \"+34\",\r\n  \"+238\" = \"+238\",\r\n  \"+236\" = \"+236\",\r\n  \"+235\" = \"+235\",\r\n  \"+56\" = \"+56\",\r\n  \"+86\" = \"+86\",\r\n  \"+57\" = \"+57\",\r\n  \"+269\" = \"+269\",\r\n  \"+242\" = \"+242\",\r\n  \"+243\" = \"+243\",\r\n  \"+682\" = \"+682\",\r\n  \"+506\" = \"+506\",\r\n  \"+385\" = \"+385\",\r\n  \"+53\" = \"+53\",\r\n  \"+357\" = \"+357\",\r\n  \"+420\" = \"+420\",\r\n  \"+45\" = \"+45\",\r\n  \"+253\" = \"+253\",\r\n  \"+670\" = \"+670\",\r\n  \"+593\" = \"+593\",\r\n  \"+20\" = \"+20\",\r\n  \"+503\" = \"+503\",\r\n  \"+44\" = \"+44\",\r\n  \"+240\" = \"+240\",\r\n  \"+291\" = \"+291\",\r\n  \"+372\" = \"+372\",\r\n  \"+251\" = \"+251\",\r\n  \"+500\" = \"+500\",\r\n  \"+298\" = \"+298\",\r\n  \"+691\" = \"+691\",\r\n  \"+679\" = \"+679\",\r\n  \"+33\" = \"+33\",\r\n  \"+262\" = \"+262\",\r\n  \"+508\" = \"+508\",\r\n  \"+590\" = \"+590\",\r\n  \"+594\" = \"+594\",\r\n  \"+596\" = \"+596\",\r\n  \"+689\" = \"+689\",\r\n  \"+241\" = \"+241\",\r\n  \"+220\" = \"+220\",\r\n  \"+49\" = \"+49\",\r\n  \"+233\" = \"+233\",\r\n  \"+350\" = \"+350\",\r\n  \"+30\" = \"+30\",\r\n  \"+299\" = \"+299\",\r\n  \"+502\" = \"+502\",\r\n  \"+224\" = \"+224\",\r\n  \"+245\" = \"+245\",\r\n  \"+592\" = \"+592\",\r\n  \"+509\" = \"+509\",\r\n  \"+504\" = \"+504\",\r\n  \"+852\" = \"+852\",\r\n  \"+36\" = \"+36\",\r\n  \"+354\" = \"+354\",\r\n  \"+91\" = \"+91\",\r\n  \"+62\" = \"+62\",\r\n  \"+98\" = \"+98\",\r\n  \"+964\" = \"+964\",\r\n  \"+353\" = \"+353\",\r\n  \"+972\" = \"+972\",\r\n  \"+39\" = \"+39\",\r\n  \"+225\" = \"+225\",\r\n  \"+47\" = \"+47\",\r\n  \"+81\" = \"+81\",\r\n  \"+962\" = \"+962\",\r\n  \"+254\" = \"+254\",\r\n  \"+686\" = \"+686\",\r\n  \"+383\" = \"+383\",\r\n  \"+965\" = \"+965\",\r\n  \"+996\" = \"+996\",\r\n  \"+856\" = \"+856\",\r\n  \"+371\" = \"+371\",\r\n  \"+961\" = \"+961\",\r\n  \"+266\" = \"+266\",\r\n  \"+231\" = \"+231\",\r\n  \"+218\" = \"+218\",\r\n  \"+423\" = \"+423\",\r\n  \"+370\" = \"+370\",\r\n  \"+352\" = \"+352\",\r\n  \"+853\" = \"+853\",\r\n  \"+261\" = \"+261\",\r\n  \"+351\" = \"+351\",\r\n  \"+265\" = \"+265\",\r\n  \"+60\" = \"+60\",\r\n  \"+960\" = \"+960\",\r\n  \"+223\" = \"+223\",\r\n  \"+356\" = \"+356\",\r\n  \"+692\" = \"+692\",\r\n  \"+222\" = \"+222\",\r\n  \"+230\" = \"+230\",\r\n  \"+52\" = \"+52\",\r\n  \"+373\" = \"+373\",\r\n  \"+377\" = \"+377\",\r\n  \"+976\" = \"+976\",\r\n  \"+382\" = \"+382\",\r\n  \"+212\" = \"+212\",\r\n  \"+258\" = \"+258\",\r\n  \"+264\" = \"+264\",\r\n  \"+674\" = \"+674\",\r\n  \"+977\" = \"+977\",\r\n  \"+31\" = \"+31\",\r\n  \"+687\" = \"+687\",\r\n  \"+64\" = \"+64\",\r\n  \"+505\" = \"+505\",\r\n  \"+227\" = \"+227\",\r\n  \"+234\" = \"+234\",\r\n  \"+683\" = \"+683\",\r\n  \"+850\" = \"+850\",\r\n  \"+389\" = \"+389\",\r\n  \"+90\" = \"+90\",\r\n  \"+968\" = \"+968\",\r\n  \"+92\" = \"+92\",\r\n  \"+680\" = \"+680\",\r\n  \"+970\" = \"+970\",\r\n  \"+507\" = \"+507\",\r\n  \"+675\" = \"+675\",\r\n  \"+595\" = \"+595\",\r\n  \"+51\" = \"+51\",\r\n  \"+63\" = \"+63\",\r\n  \"+48\" = \"+48\",\r\n  \"+239\" = \"+239\",\r\n  \"+974\" = \"+974\",\r\n  \"+40\" = \"+40\",\r\n  \"+250\" = \"+250\",\r\n  \"+290\" = \"+290\",\r\n  \"+685\" = \"+685\",\r\n  \"+378\" = \"+378\",\r\n  \"+966\" = \"+966\",\r\n  \"+221\" = \"+221\",\r\n  \"+381\" = \"+381\",\r\n  \"+8\" = \"+8\",\r\n  \"+248\" = \"+248\",\r\n  \"+232\" = \"+232\",\r\n  \"+65\" = \"+65\",\r\n  \"+421\" = \"+421\",\r\n  \"+386\" = \"+386\",\r\n  \"+677\" = \"+677\",\r\n  \"+252\" = \"+252\",\r\n  \"+27\" = \"+27\",\r\n  \"+82\" = \"+82\",\r\n  \"+211\" = \"+211\",\r\n  \"+94\" = \"+94\",\r\n  \"+249\" = \"+249\",\r\n  \"+597\" = \"+597\",\r\n  \"+268\" = \"+268\",\r\n  \"+46\" = \"+46\",\r\n  \"+41\" = \"+41\",\r\n  \"+963\" = \"+963\",\r\n  \"+886\" = \"+886\",\r\n  \"+992\" = \"+992\",\r\n  \"+255\" = \"+255\",\r\n  \"+66\" = \"+66\",\r\n  \"+228\" = \"+228\",\r\n  \"+690\" = \"+690\",\r\n  \"+676\" = \"+676\",\r\n  \"+216\" = \"+216\",\r\n  \"+993\" = \"+993\",\r\n  \"+688\" = \"+688\",\r\n  \"+256\" = \"+256\",\r\n  \"+380\" = \"+380\",\r\n  \"+971\" = \"+971\",\r\n  \"+598\" = \"+598\",\r\n  \"+998\" = \"+998\",\r\n  \"+678\" = \"+678\",\r\n  \"+58\" = \"+58\",\r\n  \"+84\" = \"+84\",\r\n  \"+681\" = \"+681\",\r\n  \"+967\" = \"+967\",\r\n  \"+260\" = \"+260\",\r\n  \"+263\" = \"+263\",\r\n}\r\n","import * as React from \"react\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  WithStyles,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  FormHelperText,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport { styles } from \"../RegistrationFormStyle\";\r\nimport { EPhonePrefix } from \"../Enums\";\r\nimport { TRegistrationRequestRequiredFields } from \"../../../Models\";\r\n\r\n/**\r\n * @prop {Function} onChange Обработчик изменения значения телефона.\r\n * @prop {Function} isErrorVisible Метод для проверки нужно ли отображать ошибку UI-валидации.\r\n */\r\ninterface IProps {\r\n  onChange: (phone: string) => void;\r\n  isErrorVisible: (\r\n    fieldName: keyof TRegistrationRequestRequiredFields\r\n  ) => boolean;\r\n}\r\n\r\n/**\r\n * Состояние компонента.\r\n *\r\n * @prop {EPhonePrefix} prefix Префикс телефона.\r\n * @prop {string} phone Номер телефона (без префикса).\r\n */\r\ninterface IState {\r\n  prefix: EPhonePrefix;\r\n  phone: string;\r\n}\r\n\r\ntype TProps = IProps & WithStyles<typeof styles>;\r\n\r\n/**\r\n * Компонент ввода номера телефона.\r\n */\r\nexport class PhoneInput extends React.Component<TProps, IState> {\r\n  state: IState = {\r\n    prefix: EPhonePrefix[\"+7\"],\r\n    phone: \"\",\r\n  };\r\n\r\n  /**\r\n   * Опции для выпадающего списка префикса номера телефона.\r\n   */\r\n  options: string[] = Object.keys(EPhonePrefix);\r\n\r\n  /**\r\n   * Обработчик изменения префикса телефона.\r\n   *\r\n   * @prop {any} event Событие выбора префикса.\r\n   */\r\n  handleChangePrefix = (event: any) => {\r\n    this.setState({ prefix: event.target.value as EPhonePrefix });\r\n  };\r\n\r\n  /**\r\n   * Обработчик изменения телефона.\r\n   *\r\n   * @prop {React.ChangeEvent<HTMLInputElement>} event Событие выбора телефона.\r\n   */\r\n  handleChangePhone = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newPhoneValue: string = event.target.value;\r\n\r\n    this.setState({ phone: newPhoneValue }, () => {\r\n      const phone = newPhoneValue ? `${this.state.prefix}${newPhoneValue}` : \"\";\r\n      this.props.onChange(phone);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Рендер опций для выпадающего списка префиксов.\r\n   *\r\n   */\r\n  renderOptions() {\r\n    return this.options.map((prefix: string) => {\r\n      return <MenuItem value={prefix}>{prefix}</MenuItem>;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { prefix, phone } = this.state;\r\n    const { classes, isErrorVisible } = this.props;\r\n    const isPhoneErrorVisible = isErrorVisible(\"phone\") && !phone;\r\n\r\n    return (\r\n      <FormControl className={classes.contactsPhoneContainer}>\r\n        <Box className={classes.contactsPhone}>\r\n          <InputLabel error={isPhoneErrorVisible} shrink>\r\n            Префикс\r\n          </InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-placeholder-label-label\"\r\n            id=\"demo-simple-select-placeholder-label\"\r\n            value={prefix}\r\n            onChange={this.handleChangePrefix}\r\n            displayEmpty\r\n            className={classes.contactsPrefixSelect}\r\n            error={isPhoneErrorVisible}\r\n          >\r\n            {this.renderOptions()}\r\n          </Select>\r\n          <TextField\r\n            label=\"Телефон\"\r\n            value={phone}\r\n            fullWidth\r\n            onChange={this.handleChangePhone}\r\n            error={isPhoneErrorVisible}\r\n            type=\"number\"\r\n          />\r\n        </Box>\r\n        {isPhoneErrorVisible && (\r\n          <Box>\r\n            <FormHelperText error>Не указан телефон.</FormHelperText>\r\n          </Box>\r\n        )}\r\n      </FormControl>\r\n    );\r\n  }\r\n}\r\n","/**\r\n * Возвращает телефон, отформатированный для отправки на сервер.\r\n * Заменяет \"+\" на URL-код \"%2b\"\r\n *\r\n * @param {string} phone Телефон.\r\n */\r\nexport function getPhoneForServer(phone: string) {\r\n  return phone.replace(\"+\", \"%2b\");\r\n}\r\n\r\n/**\r\n * Функция валидации Email.\r\n *\r\n * @param {string} email Электронная почта.\r\n */\r\nexport function validateEmail(email: string): boolean {\r\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(email);\r\n}\r\n","import * as React from \"react\";\r\nimport {\r\n  Container,\r\n  WithStyles,\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport { styles } from \"../RegistrationFormStyle\";\r\nimport { PhoneInput } from \"./PhoneInput\";\r\nimport { validateEmail } from \"../Utils/Utils\";\r\nimport { ISectionProps } from \"../Models\";\r\n\r\ntype TProps = ISectionProps & WithStyles<typeof styles>;\r\n\r\n/**\r\n * Состояние компонента.\r\n *\r\n * @prop {string} passwordConfirmation Подтверждение пароля.\r\n */\r\ninterface IState {\r\n  passwordConfirmation: string;\r\n}\r\n\r\n/**\r\n * Секция \"Контакты\".\r\n */\r\nexport class ContactsSection extends React.Component<TProps, IState> {\r\n  state: IState = {\r\n    passwordConfirmation: \"\",\r\n  };\r\n\r\n  /**\r\n   * Обработчик изменения поля \"электронная почта\".\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} e\r\n   */\r\n  handleChangeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onChange({ email: e.target.value });\r\n  };\r\n\r\n  /**\r\n   * Обработчик изменения поля \"телефон\".\r\n   *\r\n   * @param {string} phone Телефон.\r\n   */\r\n  handleChangePhone = (phone: string) => {\r\n    this.props.onChange({ phone });\r\n  };\r\n\r\n  /**\r\n   * Обработчик изменения поля \"Пароль\".\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} e\r\n   */\r\n  handleChangePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.props.onChange({ password: e.target.value });\r\n  };\r\n\r\n  /**\r\n   * Обработчик изменения поля \"Пароль для подтверждения\".\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} e\r\n   */\r\n  handleChangePasswordConfirmation = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    this.setState({ passwordConfirmation: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      onNextButtonClick,\r\n      form: { email, facebook, telegram, password },\r\n      isErrorVisible,\r\n      isActionInProgress,\r\n    } = this.props;\r\n    const { passwordConfirmation } = this.state;\r\n\r\n    const isEmptyEmailErrorVisible = isErrorVisible(\"email\") && !email;\r\n    const isPasswordConfirmationErrorVisible =\r\n      !!passwordConfirmation && !!password && password !== passwordConfirmation;\r\n    const isPasswordErrorVisible = isErrorVisible(\"password\") && !password;\r\n    const isEmailFormatErrorVisible = !!email && !validateEmail(email);\r\n\r\n    return (\r\n      <Container maxWidth=\"md\" className={classes.container}>\r\n        <Box className={classes.generalInfoFieldsContainer}>\r\n          <Box className={classes.formColomn}>\r\n            <Box className={classes.formRow}>\r\n              <TextField\r\n                label=\"Электронная почта\"\r\n                value={email}\r\n                fullWidth\r\n                error={isEmptyEmailErrorVisible || isEmailFormatErrorVisible}\r\n                helperText={\r\n                  isEmptyEmailErrorVisible\r\n                    ? \"Не указана электронная почта\"\r\n                    : isEmailFormatErrorVisible\r\n                    ? \"Неверный формат электронной почты\"\r\n                    : null\r\n                }\r\n                onChange={this.handleChangeEmail}\r\n              />\r\n            </Box>\r\n            <Box className={classes.formRow}>\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Пароль\"\r\n                value={password}\r\n                fullWidth\r\n                onChange={this.handleChangePassword}\r\n                error={isPasswordErrorVisible}\r\n                helperText={isPasswordErrorVisible && \"Не указан пароль\"}\r\n              />\r\n            </Box>\r\n            <Box className={classes.formRow}>\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Подтвердите пароль\"\r\n                value={passwordConfirmation}\r\n                fullWidth\r\n                error={\r\n                  isPasswordErrorVisible || isPasswordConfirmationErrorVisible\r\n                }\r\n                onChange={this.handleChangePasswordConfirmation}\r\n                helperText={\r\n                  isPasswordErrorVisible\r\n                    ? \"Не указан пароль\"\r\n                    : isPasswordConfirmationErrorVisible\r\n                    ? \"Не совпадают пароли\"\r\n                    : \"\"\r\n                }\r\n              />\r\n            </Box>\r\n            <Box className={classes.formRow}>\r\n              <PhoneInput\r\n                isErrorVisible={isErrorVisible}\r\n                classes={classes}\r\n                onChange={this.handleChangePhone}\r\n              />\r\n            </Box>\r\n            <Box className={classes.formRow}>\r\n              <TextField label=\"Facebook\" value={facebook} fullWidth />\r\n            </Box>\r\n            <Box className={classes.formRow}>\r\n              <TextField label=\"Telegram\" value={telegram} fullWidth />\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <Box className={classes.sectionFooter}>\r\n          <Button\r\n            onClick={onNextButtonClick}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            endIcon={!isActionInProgress && <ArrowForwardIosIcon />}\r\n            disabled={isActionInProgress}\r\n            className={classes.generalInfoNextButton}\r\n          >\r\n            {isActionInProgress ? (\r\n              <CircularProgress size=\"1rem\" />\r\n            ) : (\r\n              \"Выслать SMS-код\"\r\n            )}\r\n          </Button>\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport {\r\n  Modal,\r\n  TextField,\r\n  WithStyles,\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { styles } from \"../RegistrationFormStyle\";\r\nimport { IActions } from \"../../../Actions/Actions\";\r\nimport { IRequestSendSMSCodeResponse } from \"../../../Models\";\r\nimport { getPhoneForServer } from \"../Utils/Utils\";\r\n\r\n/**\r\n * @prop {boolean} isOpen Флаг отображения модального окна.\r\n * @prop {Function} onClose Обработчик закрытия модального окна.\r\n * @prop {Function} onOpenSuccessRegistrationModal Обработчик открытия модального окна успешной регистрации.\r\n * @prop {number} remainingSecondsForSMS Общее количество секунд, которые нужно подождать для повторного вызова сервиса получения SMS-кода.\r\n * @prop {IActions} actions Действия.\r\n * @prop {string} phone Телефон.\r\n */\r\ninterface IProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onOpenSuccessRegistrationModal: () => void;\r\n  remainingSecondsForSMS: number;\r\n  actions: IActions;\r\n  phone: string;\r\n}\r\n\r\n/**\r\n * Состояние компонента.\r\n *\r\n * @prop {string} smsCode SMS-код, введеный пользователем.\r\n * @prop {number} remainingSeconds Количество секунд, которые осталось подождать до вызова для повторного вызова сервиса получения SMS-кода.\r\n * @prop {boolean} isLoaderSendCodeButtonVisible Флаг отображения спиннера для кнопки отправить SMS-код.\r\n */\r\ninterface IState {\r\n  smsCode: string;\r\n  remainingSeconds: number;\r\n  isLoaderSendCodeButtonVisible: boolean;\r\n}\r\n\r\ntype TProps = IProps & WithStyles<typeof styles>;\r\n\r\n/**\r\n * Модальное окно для верификации SMS-кода.\r\n */\r\nexport class SMSModal extends React.Component<TProps, IState> {\r\n  state: IState = {\r\n    smsCode: \"\",\r\n    remainingSeconds: 0,\r\n    isLoaderSendCodeButtonVisible: false,\r\n  };\r\n\r\n  smsCodeTimerId: any;\r\n\r\n  componentDidMount() {\r\n    this.setState(\r\n      { remainingSeconds: this.props.remainingSecondsForSMS },\r\n      this.setSendCodeInterval\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Обработчик запроса нового SMS-кода.\r\n   *\r\n   */\r\n  handleRequestNewSMSCode = () => {\r\n    const { actions, phone } = this.props;\r\n    const phoneForServer = getPhoneForServer(phone);\r\n\r\n    actions\r\n      .sendRequestToGetSMSCode(phoneForServer)\r\n      .then((data: IRequestSendSMSCodeResponse | undefined) => {\r\n        const remainingSeconds = data?.smsSessionParameters.nextSendAfterSec;\r\n\r\n        this.setState(\r\n          {\r\n            remainingSeconds: !!remainingSeconds ? remainingSeconds : 0,\r\n          },\r\n          () => {\r\n            clearInterval(this.smsCodeTimerId);\r\n            this.setSendCodeInterval();\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.smsCodeTimerId);\r\n  }\r\n\r\n  /**\r\n   * Обработчик изменения SMS-кода.\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} e Событие ввода смс-кода.\r\n   */\r\n  handleChangeSMSCode = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({ smsCode: e.target.value });\r\n  };\r\n\r\n  /**\r\n   * Задать интервал для уменьшения отсавшегося количества секунд на 1.\r\n   */\r\n  setSendCodeInterval = () => {\r\n    this.smsCodeTimerId = setInterval(() => {\r\n      let remainingSeconds = this.state.remainingSeconds;\r\n\r\n      if (!remainingSeconds) {\r\n        clearInterval(this.smsCodeTimerId);\r\n        return;\r\n      }\r\n\r\n      this.setState({ remainingSeconds: --remainingSeconds });\r\n    }, 1000);\r\n  };\r\n\r\n  /**\r\n   * Обработчик отправки SMS-кода для верификации.\r\n   */\r\n  handleSendSMSCode = (): void => {\r\n    const {\r\n      actions,\r\n      phone,\r\n      onOpenSuccessRegistrationModal,\r\n      onClose,\r\n    } = this.props;\r\n    const { smsCode } = this.state;\r\n    const phoneForServer: string = getPhoneForServer(phone);\r\n\r\n    this.setState({ isLoaderSendCodeButtonVisible: true });\r\n    actions\r\n      .registrationUser(phoneForServer, smsCode)\r\n      .then(() => {\r\n        onOpenSuccessRegistrationModal();\r\n        onClose();\r\n      })\r\n      .finally(() => {\r\n        this.setState({ isLoaderSendCodeButtonVisible: false });\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Рендер тела модального окна.\r\n   */\r\n  renderModalBody() {\r\n    const { classes } = this.props;\r\n    const {\r\n      smsCode,\r\n      remainingSeconds,\r\n      isLoaderSendCodeButtonVisible,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className={classes.SMSModal}>\r\n        <Box className={classes.SMSModalBody}>\r\n          <h2>Введите SMS-код для окончания регистрации</h2>\r\n          <p>\r\n            Повторно&nbsp;\r\n            <Link href=\"#\" onClick={this.handleRequestNewSMSCode}>\r\n              запросить\r\n            </Link>\r\n            &nbsp;код можно через: {remainingSeconds} секунд.\r\n          </p>\r\n          <Grid container spacing={1} alignItems=\"flex-end\">\r\n            <Grid item>\r\n              <TextField\r\n                value={smsCode}\r\n                label=\"SMS-код\"\r\n                onChange={this.handleChangeSMSCode}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={this.handleSendSMSCode}\r\n                disabled={!smsCode || isLoaderSendCodeButtonVisible}\r\n                className={classes.SMSModalSendCodeButton}\r\n              >\r\n                {isLoaderSendCodeButtonVisible ? (\r\n                  <CircularProgress size=\"1em\" />\r\n                ) : (\r\n                  \"Отправить\"\r\n                )}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isOpen, onClose } = this.props;\r\n\r\n    return (\r\n      <Modal\r\n        disableBackdropClick\r\n        open={isOpen}\r\n        disableEscapeKeyDown\r\n        onClose={onClose}\r\n      >\r\n        {this.renderModalBody()}\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n","import { TRegistrationRequestRequiredFields } from \"../Models\";\r\n\r\n/**\r\n * Массив набора полей регистрационной формы, которые являются обязательными для заполнения.\r\n */\r\nexport const REGISTRATION_FORM_REQUIRED_FIELDS: (keyof TRegistrationRequestRequiredFields)[] = [\r\n  \"name\",\r\n  \"email\",\r\n  \"phone\",\r\n  \"password\",\r\n];\r\n","import { IRegistrationFormValidationError } from \"./Models\";\r\n\r\n/**\r\n * Массив текстовок для ошибок валидации на форме регистрации.\r\n */\r\nexport const REGISTRATION_FORM_VALIDATION_ERRORS: IRegistrationFormValidationError = {\r\n  name: \"Не указано наименование организации\",\r\n  email: \"Не указана электронная почта\",\r\n  password: \"Не указан пароль\",\r\n  phone: \"Не указан телефон\",\r\n};\r\n","import * as React from \"react\";\r\nimport { isEmpty } from \"lodash\";\r\nimport {\r\n  Typography,\r\n  withStyles,\r\n  WithStyles,\r\n  Container,\r\n  Tabs,\r\n  Tab,\r\n  Paper,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport { styles } from \"./RegistrationFormStyle\";\r\nimport { TabPanel } from \"./Components/TabPanel\";\r\nimport { WelcomeSection } from \"./Components/WelcomeSection\";\r\nimport { GeneralInformationSection } from \"./Components/GeneralInformationSection\";\r\nimport { SuccessRegistrationModal } from \"./Components/SuccessRegistrationModal\";\r\nimport { ContactsSection } from \"./Components/ContactsSection\";\r\nimport { SMSModal } from \"./Components/SMSModal\";\r\nimport { ERegistrationFormTab } from \"./Enums\";\r\nimport {\r\n  IRegistrationRequest,\r\n  TRegistrationRequestRequiredFields,\r\n  IRequestSendSMSCodeResponse,\r\n} from \"../../Models\";\r\nimport { REGISTRATION_FORM_REQUIRED_FIELDS } from \"../../Consts/RegistrationFormConsts\";\r\nimport { Actions, IActions } from \"../../Actions/Actions\";\r\nimport { Services } from \"../../Services/Services\";\r\nimport { withSnackbar, ProviderContext } from \"notistack\";\r\nimport { getPhoneForServer } from \"./Utils/Utils\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { anchorOrigin } from \"../../Consts/NotificationConsts\";\r\nimport { REGISTRATION_FORM_VALIDATION_ERRORS } from \"./Consts\";\r\n\r\ntype TProps = WithStyles<typeof styles> & ProviderContext & RouteComponentProps;\r\n\r\n/**\r\n * Состояние компонента.\r\n *\r\n * @prop {ERegistrationFormTab} selectedTab Выбранная вкладка.\r\n * @prop {IRegistrationRequest} form Форма.\r\n * @prop {boolean} isOpenSMSModal Флаг открыта ли модалка для ввода SMS-кода.\r\n * @prop {string[]} validationErrors Ошибки валидации.\r\n * @prop {number} remainingSecondsForSMS remainingSecondsForSMS Общее количество секунд, которые нужно подождать для повторного вызова сервиса получения SMS-кода.\r\n * @prop {boolean} isSendSMSRequestInProgress Флаг нахождения запроса на получение SMS-кода в состоянии прогресса.\r\n * @prop {boolean} isOpenSuccessRegistrationModal Флаг отображения модального окна успешной регистрации.\r\n */\r\ninterface IState {\r\n  selectedTab: ERegistrationFormTab;\r\n  form: IRegistrationRequest;\r\n  isOpenSMSModal: boolean;\r\n  validationErrors: string[];\r\n  remainingSecondsForSMS: number;\r\n  isSendSMSRequestInProgress: boolean;\r\n  isOpenSuccessRegistrationModal: boolean;\r\n}\r\n\r\n/**\r\n * Форма регистрации.\r\n */\r\nclass RegistrationForm extends React.Component<TProps, IState> {\r\n  state: IState = {\r\n    selectedTab: ERegistrationFormTab.WELCOME,\r\n    form: {\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      password: \"\",\r\n    },\r\n    isOpenSMSModal: false,\r\n    isOpenSuccessRegistrationModal: false,\r\n    validationErrors: [],\r\n    remainingSecondsForSMS: 0,\r\n    isSendSMSRequestInProgress: false,\r\n  };\r\n\r\n  actions: IActions = new Actions(\r\n    new Services(),\r\n    this.props.enqueueSnackbar,\r\n    this.props.history\r\n  );\r\n\r\n  /**\r\n   * Проверка необходимо ли показывать UI валидацию для данного поля.\r\n   *\r\n   * @param {keyof TRegistrationRequestRequiredFields} fieldName Наименование поля.\r\n   */\r\n  isErrorVisible = (\r\n    fieldName: keyof TRegistrationRequestRequiredFields\r\n  ): boolean => {\r\n    return this.state.validationErrors.includes(fieldName);\r\n  };\r\n\r\n  /**\r\n   * Функция валидации формы.\r\n   *\r\n   * @param {(keyof TRegistrationRequestRequiredFields)[]} fieldNames Массив наименовани полей, которые необходимо провалидировать.\r\n   * @param {Function} callback Коллбек, вызываемый после валидации, в случае успеха.\r\n   */\r\n  validateForm(\r\n    fieldNames: (keyof TRegistrationRequestRequiredFields)[],\r\n    callback: () => void\r\n  ) {\r\n    const { form, validationErrors } = this.state;\r\n    const { enqueueSnackbar } = this.props;\r\n    let newValidationErrors = [...validationErrors];\r\n\r\n    fieldNames.forEach((key: keyof TRegistrationRequestRequiredFields) => {\r\n      if (REGISTRATION_FORM_REQUIRED_FIELDS.includes(key)) {\r\n        if (isEmpty(form[key])) {\r\n          !newValidationErrors.includes(key) && newValidationErrors.push(key);\r\n        } else {\r\n          if (newValidationErrors.includes(key)) {\r\n            newValidationErrors = newValidationErrors.filter(\r\n              (error) => error !== key\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const sectionErrors = newValidationErrors.filter((key: string) =>\r\n      fieldNames.includes(key as keyof TRegistrationRequestRequiredFields)\r\n    );\r\n\r\n    if (!isEmpty(newValidationErrors)) {\r\n      sectionErrors.forEach((keyError) => {\r\n        enqueueSnackbar(REGISTRATION_FORM_VALIDATION_ERRORS[keyError], {\r\n          anchorOrigin,\r\n          variant: \"error\",\r\n        });\r\n      });\r\n    }\r\n\r\n    this.setState(\r\n      { validationErrors: newValidationErrors },\r\n      !isEmpty(sectionErrors) ? undefined : callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Обработчик выбора вкладки.\r\n   *\r\n   * @param {ERegistrationFormTab} selectedTab Выбранная вкладка.\r\n   */\r\n  handleChangeSelectedTab = (selectedTab: ERegistrationFormTab) => (): void => {\r\n    this.setState({ selectedTab });\r\n  };\r\n\r\n  /**\r\n   * Обработчик выбора вкладки.\r\n   *\r\n   * @param {React.ChangeEvent<{}>} _event Событие.\r\n   * @param {ERegistrationFormTab} selectedTab Выбранная вкладка.\r\n   */\r\n  handleSelectTab = (\r\n    _event: React.ChangeEvent<{}>,\r\n    selectedTab: ERegistrationFormTab\r\n  ) => {\r\n    this.handleChangeSelectedTab(selectedTab)();\r\n  };\r\n\r\n  /**\r\n   * Обработчик изменения формы.\r\n   *\r\n   * @param {Partial<IRegistrationRequest>} partial Набор полей из формы, которые необходимо обновить.\r\n   */\r\n  handleChangeForm = (partial: Partial<IRegistrationRequest>) => {\r\n    this.setState((prevState) => ({\r\n      form: { ...prevState.form, ...partial },\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * Обработчик закрытия модалки с SMS-кодом.\r\n   *\r\n   */\r\n  handleCloseSMSModal = () => {\r\n    this.setState({ isOpenSMSModal: false });\r\n  };\r\n\r\n  /**\r\n   * Обработчик открытия модалки с SMS-кодом.\r\n   */\r\n  handleOpenSMSModal = () => {\r\n    this.setState({ isOpenSMSModal: true });\r\n  };\r\n\r\n  /**\r\n   * Обработчик отправки запроса на получение SMS-кода.\r\n   */\r\n  handleSendSMSCode = () => {\r\n    this.setState({ isSendSMSRequestInProgress: true });\r\n    const phone = this.state.form.phone;\r\n    const phoneForServer = getPhoneForServer(phone);\r\n\r\n    this.actions\r\n      .sendRequestToGetSMSCode(phoneForServer)\r\n      .then((data: IRequestSendSMSCodeResponse | undefined) => {\r\n        const remainingSeconds = data?.smsSessionParameters.nextSendAfterSec;\r\n\r\n        this.setState(\r\n          {\r\n            remainingSecondsForSMS: !!remainingSeconds ? remainingSeconds : 0,\r\n          },\r\n          this.handleOpenSMSModal\r\n        );\r\n      })\r\n      .finally(() => {\r\n        this.setState({ isSendSMSRequestInProgress: false });\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Обработчик нажатия на кнопку перехода к следующему действию.\r\n   *\r\n   * @prop {ERegistrationFormTab} section Секция\r\n   */\r\n  handleNextButtonClick = (section: ERegistrationFormTab) => () => {\r\n    switch (section) {\r\n      case ERegistrationFormTab.WELCOME: {\r\n        this.handleChangeSelectedTab(\r\n          ERegistrationFormTab.GENERAL_INFORMATION\r\n        )();\r\n        break;\r\n      }\r\n      case ERegistrationFormTab.GENERAL_INFORMATION: {\r\n        this.validateForm(\r\n          [\"name\"],\r\n          this.handleChangeSelectedTab(ERegistrationFormTab.CONTACTS)\r\n        );\r\n        break;\r\n      }\r\n      case ERegistrationFormTab.CONTACTS: {\r\n        this.validateForm(\r\n          [\"email\", \"phone\", \"password\", \"name\"],\r\n          this.handleSendSMSCode\r\n        );\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Обработчик открытия модалки об успешном завершении регистрации.\r\n   *\r\n   */\r\n  handleOpenSuccessRegistrationModal = () => {\r\n    this.setState({ isOpenSuccessRegistrationModal: true });\r\n  };\r\n\r\n  /**\r\n   * Обработчик закрытия модалки об успешном завершении регистрации.\r\n   *\r\n   */\r\n  handleCloseSuccessRegistrationModal = () => {\r\n    this.setState({ isOpenSuccessRegistrationModal: false }, () => {\r\n      this.props.history.push({\r\n        pathname: \"/\",\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      selectedTab,\r\n      form,\r\n      form: { phone },\r\n      isOpenSMSModal,\r\n      remainingSecondsForSMS,\r\n      isSendSMSRequestInProgress,\r\n      isOpenSuccessRegistrationModal,\r\n    } = this.state;\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Box>\r\n            <Typography variant=\"h4\" className={classes.header}>\r\n              Регистрация\r\n            </Typography>\r\n          </Box>\r\n          <Paper square className={classes.registrationForm}>\r\n            <Tabs\r\n              value={selectedTab}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              onChange={this.handleSelectTab}\r\n            >\r\n              <Tab value={ERegistrationFormTab.WELCOME} label=\"Приветствие\" />\r\n              <Tab\r\n                value={ERegistrationFormTab.GENERAL_INFORMATION}\r\n                label=\"Общая информация\"\r\n              />\r\n              <Tab value={ERegistrationFormTab.CONTACTS} label=\"Контакты\" />\r\n            </Tabs>\r\n            <TabPanel\r\n              selectedTab={selectedTab}\r\n              index={ERegistrationFormTab.WELCOME}\r\n            >\r\n              <WelcomeSection\r\n                onNextButtonClick={this.handleNextButtonClick(\r\n                  ERegistrationFormTab.WELCOME\r\n                )}\r\n                classes={classes}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel\r\n              selectedTab={selectedTab}\r\n              index={ERegistrationFormTab.GENERAL_INFORMATION}\r\n            >\r\n              <GeneralInformationSection\r\n                onNextButtonClick={this.handleNextButtonClick(\r\n                  ERegistrationFormTab.GENERAL_INFORMATION\r\n                )}\r\n                onChange={this.handleChangeForm}\r\n                classes={classes}\r\n                form={form}\r\n                isErrorVisible={this.isErrorVisible}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel\r\n              selectedTab={selectedTab}\r\n              index={ERegistrationFormTab.CONTACTS}\r\n            >\r\n              <ContactsSection\r\n                onNextButtonClick={this.handleNextButtonClick(\r\n                  ERegistrationFormTab.CONTACTS\r\n                )}\r\n                onChange={this.handleChangeForm}\r\n                classes={classes}\r\n                form={form}\r\n                isErrorVisible={this.isErrorVisible}\r\n                isActionInProgress={isSendSMSRequestInProgress}\r\n              />\r\n            </TabPanel>\r\n          </Paper>\r\n        </Container>\r\n        {isOpenSMSModal && (\r\n          <SMSModal\r\n            classes={classes}\r\n            isOpen={isOpenSMSModal}\r\n            onClose={this.handleCloseSMSModal}\r\n            remainingSecondsForSMS={remainingSecondsForSMS}\r\n            phone={phone}\r\n            actions={this.actions}\r\n            onOpenSuccessRegistrationModal={\r\n              this.handleOpenSuccessRegistrationModal\r\n            }\r\n          />\r\n        )}\r\n        {isOpenSuccessRegistrationModal && (\r\n          <SuccessRegistrationModal\r\n            classes={classes}\r\n            isOpen={isOpenSuccessRegistrationModal}\r\n            onClose={this.handleCloseSuccessRegistrationModal}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst RegistrationFormWithRouter = withRouter(RegistrationForm);\r\n\r\nconst RegistrationFormWithSnackbar = withSnackbar(RegistrationFormWithRouter);\r\n\r\nconst RegistrationFormWithStyles = withStyles(styles, {\r\n  withTheme: true,\r\n})(RegistrationFormWithSnackbar);\r\n\r\nexport default RegistrationFormWithStyles;\r\n","import * as React from \"react\";\r\nimport { Route, RouteProps } from \"react-router-dom\";\r\n\r\n/**\r\n * @prop {boolean} enabled Доступен ли роут.\r\n */\r\ninterface IProps extends RouteProps {\r\n  enabled: boolean;\r\n}\r\n\r\n/**\r\n * Компонент роута доступного по наличию условия.\r\n */\r\nexport const PrivateRoute: React.SFC<IProps> = ({\r\n  children,\r\n  enabled,\r\n  ...rest\r\n}) => {\r\n  return <Route {...rest} render={() => (enabled ? children : null)} />;\r\n};\r\n","/**\r\n * Вкладки домашней страницы.\r\n *\r\n * LIST - Список.\r\n * ACHIVE - Архив.\r\n * STATISTICS - Статистика.\r\n */\r\nexport enum EHomeTab {\r\n  LIST = \"LIST\",\r\n  ARCHIVE = \"ARCHIVE\",\r\n  STATISTICS = \"STATISTICS\",\r\n}\r\n","import * as React from \"react\";\r\nimport { withStyles, WithStyles, Tabs, Tab, Paper } from \"@material-ui/core\";\r\nimport { styles } from \"./HomeStyle\";\r\nimport { EHomeTab } from \"./Enums\";\r\n\r\ntype TProps = WithStyles<typeof styles>;\r\n\r\n/**\r\n * Состояние компонента.\r\n *\r\n * @prop {EHomeTab} selectedTab Выбранная вкладка.\r\n */\r\ninterface IState {\r\n  selectedTab: EHomeTab;\r\n}\r\n\r\n/**\r\n * Домашняя страница (для авторизованного юзера).\r\n */\r\nclass Home extends React.Component<TProps, IState> {\r\n  state: IState = {\r\n    selectedTab: EHomeTab.LIST,\r\n  };\r\n\r\n  /**\r\n   * Обработчик перехода на вкладку.\r\n   *\r\n   * @param {EHomeTab} selectedTab Выбранная вкладка.\r\n   */\r\n  handleChangeSelectedTab = (selectedTab: EHomeTab) => (): void => {\r\n    this.setState({ selectedTab });\r\n  };\r\n\r\n  /**\r\n   * Обработчик выбора вкладки.\r\n   *\r\n   * @param {React.ChangeEvent<{}>} _event Событие выбора вкладки.\r\n   * @param {EHomeTab} selectedTab Выбранная вкладка.\r\n   */\r\n  handleSelectTab = (_event: React.ChangeEvent<{}>, selectedTab: EHomeTab) => {\r\n    this.handleChangeSelectedTab(selectedTab)();\r\n  };\r\n\r\n  render() {\r\n    const { selectedTab } = this.state;\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <Paper square>\r\n        <Tabs\r\n          value={selectedTab}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          onChange={this.handleSelectTab}\r\n          classes={{\r\n            flexContainer: classes.tabContainer,\r\n          }}\r\n        >\r\n          <Tab value={EHomeTab.LIST} label=\"Список\" />\r\n          <Tab value={EHomeTab.ARCHIVE} label=\"Архив\" />\r\n          <Tab value={EHomeTab.STATISTICS} label=\"Статистика\" />\r\n        </Tabs>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nconst HomeWithStyles = withStyles(styles, {\r\n  withTheme: true,\r\n})(Home);\r\n\r\nexport default HomeWithStyles;\r\n","import { createStyles, Theme } from \"@material-ui/core\";\r\n\r\n/**\r\n * Стили для домашней страницы.\r\n *\r\n * @param {Theme} _theme Тема приложения.\r\n */\r\nexport const styles = (_theme: Theme) =>\r\n  createStyles({\r\n    tabContainer: {\r\n      display: \"inline\",\r\n    },\r\n  });\r\n","import * as React from \"react\";\r\nimport { Switch } from \"react-router-dom\";\r\nimport RegistrationForm from \"../RegistrationForm/RegistrationForm\";\r\nimport { PrivateRoute } from \"../PrivateRouter/PrivateRouter\";\r\nimport Home from \"../Home/Home\";\r\nimport { hasUserAuth } from \"../../Utils/AuthUtils\";\r\n\r\n/**\r\n * Контент страницы.\r\n */\r\nexport function PageContent() {\r\n  return (\r\n    <Switch>\r\n      <PrivateRoute path=\"/registration\" enabled={!hasUserAuth()}>\r\n        <RegistrationForm />\r\n      </PrivateRoute>\r\n      <PrivateRoute path=\"/\" exact enabled={hasUserAuth()}>\r\n        <Home />\r\n      </PrivateRoute>\r\n    </Switch>\r\n  );\r\n}\r\n","import AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport * as React from \"react\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport { IMenuItemConfig } from \"./Models\";\r\n\r\n/**\r\n * Конфигурация пунктов меню.\r\n */\r\nexport const MENU_ITEMS_CONFIGS: IMenuItemConfig[] = [\r\n  {\r\n    label: \"Мероприятия\",\r\n    icon: <DateRangeIcon />,\r\n  },\r\n  {\r\n    label: \"Подписчики\",\r\n    icon: <StarIcon />,\r\n  },\r\n  {\r\n    label: \"Аккаунт\",\r\n    icon: <AccountBoxIcon />,\r\n  },\r\n];\r\n","import * as React from \"react\";\r\nimport {\r\n  withStyles,\r\n  WithStyles,\r\n  Drawer,\r\n  ListItem,\r\n  List,\r\n  Divider,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\nimport { styles } from \"./MenuStyle\";\r\nimport { MENU_ITEMS_CONFIGS } from \"./Consts\";\r\nimport { hasUserAuth } from \"../../Utils/AuthUtils\";\r\n\r\ntype TProps = WithStyles<typeof styles>;\r\n\r\n/**\r\n * Компонент меню.\r\n */\r\nclass Menu extends React.Component<TProps> {\r\n  /**\r\n   * Рендер меню.\r\n   */\r\n  renderDrawerBody() {\r\n    return (\r\n      <div>\r\n        <div className={this.props.classes.toolbar} />\r\n        <Divider />\r\n        <List>\r\n          {MENU_ITEMS_CONFIGS.map(({ label, icon }) => (\r\n            <ListItem button key={label}>\r\n              <ListItemIcon>{icon}</ListItemIcon>\r\n              <ListItemText primary={label} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <nav hidden={!hasUserAuth()}>\r\n        <Drawer\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n          variant=\"permanent\"\r\n          open\r\n        >\r\n          {this.renderDrawerBody()}\r\n        </Drawer>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst MenuWithStyles = withStyles(styles, {\r\n  withTheme: true,\r\n})(Menu);\r\n\r\nexport { MenuWithStyles as Menu };\r\n","import { createStyles, Theme } from \"@material-ui/core\";\r\n\r\n/**\r\n * Стили для меню.\r\n *\r\n * @param {Theme} theme Тема приложения.\r\n */\r\nexport const styles = (theme: Theme) =>\r\n  createStyles({\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n      width: theme.spacing(30),\r\n    },\r\n  });\r\n","import * as React from \"react\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport { PageContent } from \"./Components/PageContent/PageContent\";\r\nimport { Menu } from \"./Components/Menu/Menu\";\r\nimport { withStyles, WithStyles } from \"@material-ui/core\";\r\nimport { appStyles } from \"./Styles/Styles\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\nimport \"./styles.css\";\r\n\r\ntype TProps = WithStyles<typeof appStyles> & RouteComponentProps;\r\n\r\n/**\r\n * Компонент приложения.\r\n */\r\nclass App extends React.Component<TProps> {\r\n  render() {\r\n    return (\r\n      <div className={`App ${this.props.classes.root}`}>\r\n        <Header />\r\n        <Menu />\r\n        <PageContent />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst AppWithStyles = withStyles(appStyles, { withTheme: true })(App);\r\n\r\nexport default withRouter(AppWithStyles);\r\n","import { createStyles, Theme } from \"@material-ui/core\";\r\n\r\n/**\r\n * Стили для компонента App.\r\n *\r\n * @param {Theme} theme Тема приложения.\r\n */\r\nexport const appStyles = (theme: Theme) => {\r\n  return createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n  });\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\n/**\r\n * Тема приложения.\r\n */\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#EF6C00\",\r\n      contrastText: \"#fff\",\r\n    },\r\n    secondary: {\r\n      main: \"#7F63F4\",\r\n    },\r\n    background: {\r\n      paper: \"#FFF\",\r\n    },\r\n  },\r\n});\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { SnackbarProvider } from \"notistack\";\r\nimport { ThemeProvider, CssBaseline } from \"@material-ui/core\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { theme } from \"./Consts/Theme\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nrender(\r\n  <SnackbarProvider>\r\n    <BrowserRouter>\r\n      <CssBaseline />\r\n      <ThemeProvider theme={theme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </BrowserRouter>\r\n  </SnackbarProvider>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}